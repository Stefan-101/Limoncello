@model Limoncello.Models.Project

<partial name="TempMessagePartial" model="Model" />

<div class="mt-3">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>
            <a asp-action="Index" asp-controller="Project" class="no-underline-no-colour">
                ←
            </a>
            @Model.Name
        </h1>
        @if (ViewBag.UserId == Model.OrganizerId){
            <a asp-action="Settings" asp-controller="Project" asp-route-id="@Model.Id" class="btn btn-secondary">Settings</a>
        }
        else{
            <form id="leaveBoardForm" method="post" asp-action="LeaveBoard" asp-controller="Project">
                <input type="hidden" name="projectId" value="@Model.Id" />
                <button type="button" data-toggle="modal" data-target="#leaveBoardModal" class="btn btn-danger">
                    Leave Board
                </button>
            </form>
        }
    </div>
    <div class="row">
        @foreach(var column in Model.TaskColumns)  @* Design is not yet in final form! *@
        {
            <div class="col-md-4">
                <div class="card mb-3">
                    <div class="card-header">
                        Column Name: @column.Name
                    </div>
                    <div class="card-body">
                        @foreach (var task in column.ProjectTasks)
                        {
                            <div class="mb-2">
                                <h5>Task Name: @task.Name</h5>
                                <p>Task Description: @task.Description</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@* Leave board confirmation popup *@
<div class="modal fade" id="leaveBoardModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Leave board</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to leave the board?
            </div>
            <div class="modal-footer flex-column">
                <button type="button" class="btn btn-danger" onclick="submitLeaveBoardForm()">Leave</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<script>
    function submitLeaveBoardForm(){
        document.getElementById("leaveBoardForm").submit();
    }

    function updateTaskColIdOnForm(id){
        document.getElementById("taskColumnId").value = id;
    }

    function updateTaskStatus(taskId) {
        var form = document.getElementById('taskStatus-' + taskId);
        var formData = new FormData(form);

        fetch(form.action, {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                console.log('Task status updated successfully');

                var status = formData.get("Status");
                var statusSquare = document.getElementById("taskStatusColor-" + taskId);
                statusSquare.classList.remove("bg-danger", "bg-warning", "bg-success");

                var taskCard = document.getElementById("taskCard-" + taskId);
                taskCard.classList.remove("border-danger", "border-warning", "border-danger");

                switch (status) {
                    case "NotStarted":
                        statusSquare.classList.add("bg-danger");
                        taskCard.classList.add("border-danger");
                        break;
                    case "InProgress":
                        statusSquare.classList.add("bg-warning");
                        taskCard.classList.add("border-warning");
                        break;
                    case "Completed":
                        statusSquare.classList.add("bg-success");
                        taskCard.classList.add("border-success");
                        break;
                    default:
                        statusSquare.classList.add("bg-dark");
                        taskCard.classList.add("border-dark");
                        break;
                }
            } else {
                alert('Failed to update task status: ' + data.message);
            }
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });
    }

    function editComment(commentId) {
        document.getElementById(`comment-content-${commentId}`).classList.add('d-none');
        document.getElementById(`edit-comment-form-${commentId}`).classList.remove('d-none');
    }

    function cancelEdit(commentId) {
        document.getElementById(`comment-content-${commentId}`).classList.remove('d-none');
        document.getElementById(`edit-comment-form-${commentId}`).classList.add('d-none');
    }

    document.addEventListener('DOMContentLoaded', (event) => {
        new Sortable(document.getElementById('taskColumns'), {
            group: 'column',
            animation: 150,
            ghostClass: 'opacity-0',
            onEnd: function(evt){
                var columnId = evt.item.id.split('-')[1];
                var newIndex = evt.newIndex;
                var oldIndex = evt.oldIndex;

                // console.log(columnId, newIndex, oldIndex);
                if (oldIndex != newIndex){
                    updateTaskColumnOrder(columnId, newIndex, oldIndex);
                }
            }
        });
    });


    document.addEventListener('DOMContentLoaded', (event) => {
        @foreach (var column in Model.TaskColumns)
        {
            <text>
                new Sortable(document.getElementById('tasks-@column.Id'), {
                    group: 'shared',
                    animation: 150,
                    ghostClass: 'opacity-0',
                    onEnd: function (evt) {
                        var itemEl = evt.item;
                        var newIndex = evt.newIndex;
                        var oldIndex = evt.oldIndex;
                        var taskId = itemEl.id.split('-')[1];
                        var newColumnId = evt.to.id.split('-')[1];
                        var oldColumnId = evt.from.id.split('-')[1];

                        // console.log('Task ID:', taskId);
                        // console.log('New Column ID:', newColumnId);
                        // console.log('New Index:', newIndex);
                        // console.log('Old Column ID:', oldColumnId);
                        // console.log('Old Index:', oldIndex);
                        if (oldIndex != newIndex || oldColumnId != newColumnId){
                            updateTaskOrder(taskId, newColumnId, newIndex, oldColumnId, oldIndex);
                        } 
                    }
                });
            </text>
        }
    });

    function updateTaskOrder(taskId, newColumnId, newIndex, oldColumnId, oldIndex) {
        fetch('/Project/UpdateTaskDisplayInfo', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({
                taskId: taskId,
                newColumnId: newColumnId,
                newIndex: newIndex,
                oldColumnId: oldColumnId,
                oldIndex: oldIndex
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log('Task order updated successfully');
            } else {
                alert('Failed to update task order: ' + data.message);
            }
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });
    }

    function updateTaskColumnOrder(columnId, newIndex, oldIndex){
         fetch('/Project/UpdateTaskColumnDisplayInfo', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({
                columnId: columnId,
                newIndex: newIndex,
                oldIndex: oldIndex
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log('Task order updated successfully');
            } else {
                alert('Failed to update task order: ' + data.message);
            }
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });
    }
</script>

<style>
    .d-flex.overflow-auto {
        white-space: nowrap;
    }

    .col-md-4 {
        width: 300px;
    }
</style>


